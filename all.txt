### Zawartość pliku: Form1.cs ###
using System;
using System.IO;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Drawing;
using System.Diagnostics;

namespace MyWinFormsApp
{
    public partial class Form1 : Form
    {
        private string downloadUrl = "https://example.com/sample.7z";
        private string downloadFilePath = Path.Combine(Application.StartupPath, "GTA_San_Andreas.7z");
        private string extractFolderPath = Path.Combine(Application.StartupPath, "GTA_San_Andreas");
        private string sevenZipPath = Path.Combine(Application.StartupPath, "7zip");
        private string sevenZipExe = Path.Combine(Application.StartupPath, "7zip", "7z.exe");
        private string sevenZipDownloadUrl = "https://www.7-zip.org/a/7z2301-x64.exe"; // Oficjalny instalator 7-Zip

        private ProgressBar progressBar;
        private Label lblStatus;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
        public Form1()
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
        {
            InitializeComponent();
            SetBackgroundImage();

#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment.
            progressBar = (ProgressBar)Controls["progressBar"];
#pragma warning restore CS8601 // Possible null reference assignment.
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment.
            lblStatus = (Label)Controls["lblStatus"];
#pragma warning restore CS8601 // Possible null reference assignment.
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
        }

        private void SetBackgroundImage()
        {
            var assembly = Assembly.GetExecutingAssembly();
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
            using (Stream stream = assembly.GetManifestResourceStream("MyWinFormsApp.background.jpg"))
            {
                if (stream != null)
                {
                    BackgroundImage = Image.FromStream(stream);
                    BackgroundImageLayout = ImageLayout.Stretch;
                }
                else
                {
                    MessageBox.Show("Obrazek tła nie został znaleziony.");
                }
            }
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
        }

        private async void BtnDownload_Click(object sender, EventArgs e)
        {
            lblStatus.Text = "Status: Sprawdzanie obecności 7-Zip...";
            if (!File.Exists(sevenZipExe))
            {
                lblStatus.Text = "Status: Pobieranie i instalacja 7-Zip...";
                await DownloadAndInstall7Zip();
            }

            lblStatus.Text = "Status: Sprawdzanie pliku do pobrania...";
            if (File.Exists(downloadFilePath))
            {
                lblStatus.Text = "Status: Plik już istnieje. Rozpakowywanie...";
                await ExtractFileAsync();
            }
            else
            {
                lblStatus.Text = "Status: Pobieranie...";
                try
                {
                    await DownloadFileAsync(downloadUrl, downloadFilePath);
                    lblStatus.Text = "Status: Pobieranie zakończone. Rozpakowywanie...";
                    await ExtractFileAsync();
                    lblStatus.Text = "Status: Zakończono!";
                    MessageBox.Show("Plik został pobrany i rozpakowany pomyślnie!", "Sukces", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    lblStatus.Text = "Status: Błąd!";
                    MessageBox.Show($"Wystąpił błąd: {ex.Message}", "Błąd", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                finally
                {
                    progressBar.Value = 0;
                }
            }
        }

private async Task DownloadAndInstall7Zip()
{
    string installerPath = Path.Combine(Application.StartupPath, "7zip_installer.exe");
    try
    {
#pragma warning disable SYSLIB0014
        using (WebClient client = new())
        {
            client.DownloadProgressChanged += (s, e) =>
            {
                progressBar.Value = e.ProgressPercentage;
            };

            await client.DownloadFileTaskAsync(new Uri(sevenZipDownloadUrl), installerPath);
        }
#pragma warning restore SYSLIB0014

        // Uruchamianie instalatora z uprawnieniami administratora
        ProcessStartInfo processInfo = new ProcessStartInfo
        {
            FileName = installerPath,
            Arguments = $"/S /D={sevenZipPath}",
            UseShellExecute = true, // Wymagane dla podniesionych uprawnień
            Verb = "runas", // Wymusza uruchomienie jako Administrator
            CreateNoWindow = true
        };

#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
                Process process = Process.Start(processInfo);
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                process.WaitForExit();
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                if (!File.Exists(sevenZipExe))
        {
            throw new Exception("Nie udało się zainstalować 7-Zip. Sprawdź uprawnienia administracyjne.");
        }

        // Dodanie 7-Zip do PATH tymczasowo
        Environment.SetEnvironmentVariable("PATH", $"{sevenZipPath};{Environment.GetEnvironmentVariable("PATH")}");
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Błąd podczas instalacji 7-Zip: {ex.Message}", "Błąd", MessageBoxButtons.OK, MessageBoxIcon.Error);
    }
    finally
    {
        if (File.Exists(installerPath))
            File.Delete(installerPath);
    }
}


        private async Task DownloadFileAsync(string url, string destination)
        {
#pragma warning disable SYSLIB0014
            using (WebClient client = new())
            {
                client.DownloadProgressChanged += (s, e) =>
                {
                    progressBar.Value = e.ProgressPercentage;
                };

                await client.DownloadFileTaskAsync(new Uri(url), destination);
            }
#pragma warning restore SYSLIB0014
        }

        private async Task ExtractFileAsync()
        {
            await Task.Run(() =>
            {
                if (!Directory.Exists(extractFolderPath))
                {
                    Directory.CreateDirectory(extractFolderPath);
                }

                Process process = new Process();
                process.StartInfo.FileName = sevenZipExe;
                process.StartInfo.Arguments = $"x \"{downloadFilePath}\" -o\"{extractFolderPath}\" -y";
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.CreateNoWindow = true;

                process.Start();
                process.WaitForExit();
            });
        }
    }
}


### Zawartość pliku: Form1.Designer.cs ###
﻿namespace MyWinFormsApp
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Text = "Instalator - Pobieranie Pliku";
            this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;

            // Przycisk Pobierz
            Button btnDownload = new Button();
            btnDownload.Size = new System.Drawing.Size(200, 50);
            btnDownload.Location = new System.Drawing.Point(300, 150);
            btnDownload.Text = "Pobierz plik";
            btnDownload.Click += BtnDownload_Click;

            // Pasek postępu
            ProgressBar progressBar = new ProgressBar();
            progressBar.Location = new System.Drawing.Point(200, 250);
            progressBar.Size = new System.Drawing.Size(400, 30);
            progressBar.Name = "progressBar";

            // Etykieta statusu
            Label lblStatus = new Label();
            lblStatus.AutoSize = true;
            lblStatus.Location = new System.Drawing.Point(200, 300);
            lblStatus.Name = "lblStatus";
            lblStatus.Text = "Status: Gotowy";

            // Dodanie komponentów do formularza
            this.Controls.Add(btnDownload);
            this.Controls.Add(progressBar);
            this.Controls.Add(lblStatus);
        }
    }
}


### Zawartość pliku: MyWinFormsApp.csproj ###
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net9.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWindowsForms>true</UseWindowsForms>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <EmbeddedResource Include="background.jpg" />
  </ItemGroup>

</Project>


### Zawartość pliku: Program.cs ###
using System;
using System.Windows.Forms;

namespace MyWinFormsApp
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            ApplicationConfiguration.Initialize();
            Application.Run(new Form1());
        }
    }
}


### Zawartość pliku: MyWinFormsApp.sln ###
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.002.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "MyWinFormsApp", "MyWinFormsApp.csproj", "{4BABA20F-E026-46EC-AC93-B3B808721FA8}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{4BABA20F-E026-46EC-AC93-B3B808721FA8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4BABA20F-E026-46EC-AC93-B3B808721FA8}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4BABA20F-E026-46EC-AC93-B3B808721FA8}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4BABA20F-E026-46EC-AC93-B3B808721FA8}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {FAED096B-3180-4907-8A0B-B67BC515DD0A}
	EndGlobalSection
EndGlobal


### Zawartość pliku: MyWinFormsApp.csproj.user ###
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <ItemGroup>
        <Compile Update="Form1.cs">
            <SubType>Form</SubType>
        </Compile>
    </ItemGroup>
</Project>


### Zawartość pliku: background.jpg ###
